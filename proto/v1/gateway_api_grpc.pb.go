// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protov1

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayAPIClient is the client API for GatewayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
}

type gatewayAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAPIClient(cc grpc.ClientConnInterface) GatewayAPIClient {
	return &gatewayAPIClient{cc}
}

func (c *gatewayAPIClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/com.affinity.gateway.proto.v1.GatewayAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAPIServer is the server API for GatewayAPI service.
// All implementations must embed UnimplementedGatewayAPIServer
// for forward compatibility
type GatewayAPIServer interface {
	// Reachability test.
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	mustEmbedUnimplementedGatewayAPIServer()
}

// UnimplementedGatewayAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAPIServer struct {
}

func (*UnimplementedGatewayAPIServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGatewayAPIServer) mustEmbedUnimplementedGatewayAPIServer() {}

func RegisterGatewayAPIServer(s *grpc.Server, srv GatewayAPIServer) {
	s.RegisterService(&_GatewayAPI_serviceDesc, srv)
}

func _GatewayAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.affinity.gateway.proto.v1.GatewayAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.affinity.gateway.proto.v1.GatewayAPI",
	HandlerType: (*GatewayAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GatewayAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/gateway_api.proto",
}
